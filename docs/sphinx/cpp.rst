
.. _cpp:

.. This file is autogenerated using `python extract_from_cpp.py`.


C++ API
=======

This is the API documentation of the original
`S2 geometry library <https://code.google.com/p/s2-geometry-library/>`_
extracted from its source code and included here for reference.


.. cpp:class:: R1Interval

  An R1Interval represents a closed, bounded interval on the real line.
  It is capable of representing the empty interval (containing no points)
  and zero-length intervals (containing a single point).
  
  This class is intended to be copied by value as desired.  It uses
  the default copy constructor and assignment operator.


.. cpp:class:: S1Angle

  This class represents a one-dimensional angle (as opposed to a
  two-dimensional solid angle).  It has methods for converting angles to
  or from radians, degrees, and the E5/E6/E7 representations (i.e. degrees
  multiplied by 1e5/1e6/1e7 and rounded to the nearest integer).
  
  This class has built-in support for the E5, E6, and E7
  representations.  An E5 is the measure of an angle in degrees,
  multiplied by 10**5.
  
  This class is intended to be copied by value as desired.  It uses
  the default copy constructor and assignment operator.


.. cpp:class:: S1Interval

  An S1Interval represents a closed interval on a unit circle (also known
  as a 1-dimensional sphere).  It is capable of representing the empty
  interval (containing no points), the full interval (containing all
  points), and zero-length intervals (containing a single point).
  
  Points are represented by the angle they make with the positive x-axis in
  the range [-Pi, Pi].  An interval is represented by its lower and upper
  bounds (both inclusive, since the interval is closed).  The lower bound may
  be greater than the upper bound, in which case the interval is "inverted"
  (i.e. it passes through the point (-1, 0)).
  
  Note that the point (-1, 0) has two valid representations, Pi and -Pi.
  The normalized representation of this point internally is Pi, so that
  endpoints of normal intervals are in the range (-Pi, Pi].  However, we
  take advantage of the point -Pi to construct two special intervals:
  the Full() interval is [-Pi, Pi], and the Empty() interval is [Pi, -Pi].
  
  This class is intended to be copied by value as desired.  It uses
  the default copy constructor and assignment operator.


.. cpp:class:: S2

  The S2 class is simply a namespace for constants and static utility
  functions related to spherical geometry, such as area calculations and edge
  intersection tests.  The name "S2" is derived from the mathematical symbol
  for the two-dimensional unit sphere (note that the "2" refers to the
  dimension of the surface, not the space it is embedded in).
  
  This class also defines a framework for decomposing the unit sphere into a
  hierarchy of "cells".  Each cell is a quadrilateral bounded by four
  geodesics.  The top level of the hierarchy is obtained by projecting the
  six faces of a cube onto the unit sphere, and lower levels are obtained by
  subdividing each cell into four children recursively.
  
  This class specifies the details of how the cube faces are projected onto
  the unit sphere.  This includes getting the face ordering and orientation
  correct so that sequentially increasing cell ids follow a continuous
  space-filling curve over the entire sphere, and defining the
  transformation from cell-space to cube-space in order to make the cells
  more uniform in size.
  
  This file also contains documentation of the various coordinate systems
  and conventions used.
  
  This class is not thread-safe for loops and objects that use loops.
  


.. cpp:class:: S2Cap : public S2Region

  This class represents a spherical cap, i.e. a portion of a sphere cut off
  by a plane.  The cap is defined by its axis and height.  This
  representation has good numerical accuracy for very small caps (unlike the
  (axis, min-distance-from-origin) representation), and is also efficient for
  containment tests (unlike the (axis, angle) representation).
  
  Here are some useful relationships between the cap height (h), the cap
  opening angle (theta), the maximum chord length from the cap's center (d),
  and the radius of cap's base (a).  All formulas assume a unit radius.
  
  .. code-block:: cpp
  
      h = 1 - cos(theta)
        = 2 sin^2(theta/2)
    d^2 = 2 h
        = a^2 + h^2
    
  Caps may be constructed from either an axis and a height, or an axis and
  an angle.  To avoid ambiguity, there are no public constructors except
  the default constructor.
  
  This class is intended to be copied by value as desired.  It uses
  the default copy constructor and assignment operator, however it is
  not a "plain old datatype" (POD) because it has virtual functions.


.. cpp:class:: S2Cell : public S2Region

  This class is intended to be copied by value as desired.  It uses
  the default copy constructor and assignment operator, however it is
  not a "plain old datatype" (POD) because it has virtual functions.


.. cpp:class:: S2CellId

  An S2CellId is a 64-bit unsigned integer that uniquely identifies a
  cell in the S2 cell decomposition.  It has the following format:
  
  .. code-block:: cpp
  
    id = [face][face_pos]
    
    face:     a 3-bit number (range 0..5) encoding the cube face.
    
    face_pos: a 61-bit number encoding the position of the center of this
              cell along the Hilbert curve over this face (see the Wiki
              pages for details).
    
  Sequentially increasing cell ids follow a continuous space-filling curve
  over the entire sphere.  They have the following properties:
  
   - The id of a cell at level k consists of a 3-bit face number followed
     by k bit pairs that recursively select one of the four children of
     each cell.  The next bit is always 1, and all other bits are 0.
     Therefore, the level of a cell is determined by the position of its
     lowest-numbered bit that is turned on (for a cell at level k, this
     position is 2(kMaxLevel - k).)
  
   - The id of a parent cell is at the midpoint of the range of ids spanned
     by its children (or by its descendants at any level).
  
  Leaf cells are often used to represent points on the unit sphere, and
  this class provides methods for converting directly between these two
  representations.  For cells that represent 2D regions rather than
  discrete point, it is better to use the S2Cell class.
  
  This class is intended to be copied by value as desired.  It uses
  the default copy constructor and assignment operator.


.. cpp:class:: S2CellUnion : public S2Region

  An S2CellUnion is a region consisting of cells of various sizes.  Typically
  a cell union is used to approximate some other shape.  There is a tradeoff
  between the accuracy of the approximation and how many cells are used.
  Unlike polygons, cells have a fixed hierarchical structure.  This makes
  them more suitable for optimizations based on preprocessing.


.. cpp:class:: S2EdgeIndex

  This class structures a set S of data edges, so that one can quickly
  find which edges of S may potentially intersect or touch a query edge.
  
  The set S is assumed to be indexable by a consecutive sequence of
  integers in the range [0..num_edges()-1].  You subclass this class by
  defining the three virtual functions num_edges(), edge_from(),
  edge_to().  Then you use it as follows for a query edge (a,b):
  
  .. code-block:: cpp
  
    MyS2EdgeIndex edge_index;
    MyS2EdgeIndex::Iterator it(&edge_index);
    S2Point const* from;
    S2Point const* to;
    for (it.GetCandidates(a, b); !it.Done(); it.Next()) {
      edge_index.GetEdge(it.Index(), &from, &to);
      ... RobustCrossing(a,b, from,to) ...
    }
    
  What is this GetEdge()?  You don't want to use edge_from() and
  edge_to() in your own code: these are virtual functions that will
  add a lot of overhead.  The most efficient way is as above: you
  define GetEdge() in your S2EdgeIndex subclass that access the edge
  points as efficiently as possible.
  
  The function GetCandidates initializes the iterator to return a set
  of candidate edges from S, such that we are sure that any data edge
  that touches or crosses (a,b) is a candidate.
  
  This class returns all edges until it finds that it is worth it to compute
  a quad tree on the data set.  Chance my have it that you compute the quad
  tree exactly when it's too late and all the work is done, If this happens,
  we only double the total running time.
  
  You can help the class by declaring in advance that you will make a
  certain number of calls to GetCandidates():
  
  .. code-block:: cpp
  
    MyS2EdgeIndex::Iterator it(&edge_index)
    edge_index.PredictAdditionalCalls(n);
    for (int i = 0; i < n; ++i) {
      for (it.GetCandidates(v(i), v(i+1)); !it.Done(); it.Next()) {
         ... RobustCrossing(v(i), v(i+1), it.From(), it.To()) ...
      }
    }
    
  Here, we say that we will call GetCandidates() n times.  If we have
  1000 data edges and n=1000, then we will compute the quad tree
  immediately instead of waiting till we've wasted enough time to
  justify the cost.
  
  The tradeoff between brute force and quad tree depends on many
  things, we use a very approximate trade-off.
  
  See examples in S2Loop.cc and S2Polygon.cc, in particular, look at
  the optimization that allows one to use the EdgeCrosser.
  
  TODO(user): Get a better API without the clumsy GetCandidates().
  
  .. code-block:: cpp
  
    Maybe edge_index.GetIterator()?


.. cpp:class:: S2EdgeUtil

  This class contains various utility functions related to edges.  It
  collects together common code that is needed to implement polygonal
  geometry such as polylines, loops, and general polygons.


.. cpp:class:: S2LatLng

  This class represents a point on the unit sphere as a pair
  of latitude-longitude coordinates.  Like the rest of the "geometry"
  package, the intent is to represent spherical geometry as a mathematical
  abstraction, so functions that are specifically related to the Earth's
  geometry (e.g. easting/northing conversions) should be put elsewhere.
  
  This class is intended to be copied by value as desired.  It uses
  the default copy constructor and assignment operator.


.. cpp:class:: S2LatLngRect : public S2Region

  An S2LatLngRect represents a closed latitude-longitude rectangle.  It is
  capable of representing the empty and full rectangles as well as
  single points.
  
  This class is intended to be copied by value as desired.  It uses
  the default copy constructor and assignment operator, however it is
  not a "plain old datatype" (POD) because it has virtual functions.


.. cpp:class:: WedgeProcessor

  Defined in the cc file. A helper class for AreBoundariesCrossing.


.. cpp:class:: S2LoopIndex: public S2EdgeIndex

  Indexing structure to efficiently compute intersections.


.. cpp:class:: S2Loop : public S2Region

  An S2Loop represents a simple spherical polygon.  It consists of a single
  chain of vertices where the first vertex is implicitly connected to the
  last.  All loops are defined to have a CCW orientation, i.e. the interior
  of the polygon is on the left side of the edges.  This implies that a
  clockwise loop enclosing a small area is interpreted to be a CCW loop
  enclosing a very large area.
  
  Loops are not allowed to have any duplicate vertices (whether adjacent or
  not), and non-adjacent edges are not allowed to intersect.  Loops must have
  at least 3 vertices.  Although these restrictions are not enforced in
  optimized code, you may get unexpected results if they are violated.
  
  Point containment is defined such that if the sphere is subdivided into
  faces (loops), every point is contained by exactly one face.  This implies
  that loops do not necessarily contain all (or any) of their vertices.
  
  TODO(user): When doing operations on two loops, always create the
  edgeindex for the bigger of the two.  Same for polygons.


.. cpp:class:: S2PointRegion : public S2Region

  An S2PointRegion is a region that contains a single point.  It is more
  expensive than the raw S2Point type and is useful mainly for completeness.


.. cpp:class:: S2Polygon : public S2Region

  An S2Polygon is an S2Region object that represents a polygon.  A polygon
  consists of zero or more loops representing "shells" and "holes".  All
  loops should be oriented CCW, i.e. the shell or hole is on the left side of
  the loop.  Loops may be specified in any order.  A point is defined to be
  inside the polygon if it is contained by an odd number of loops.
  
  Polygons have the following restrictions:
  
   - Loops may not cross, i.e. the boundary of a loop may not intersect
     both the interior and exterior of any other loop.
  
   - Loops may not share edges, i.e. if a loop contains an edge AB, then
     no other loop may contain AB or BA.
  
   - No loop may cover more than half the area of the sphere.  This ensures
     that no loop properly contains the complement of any other loop, even
     if the loops are from different polygons.  (Loops that represent exact
     hemispheres are allowed.)
  
  Loops may share vertices, however no vertex may appear twice in a single
  loop (see s2loop.h).


.. cpp:class:: S2PolygonBuilderOptions

  This is a simple class for assembling polygons out of edges.  It requires
  that no two edges cross.  It can handle both directed and undirected edges,
  and optionally it can also remove duplicate edge pairs (consisting of two
  identical edges or an edge and its reverse edge).  This is useful for
  computing seamless unions of polygons that have been cut into pieces.
  
  Here are some of the situations this class was designed to handle:
  
  1. Computing the union of disjoint polygons that may share part of their
     boundaries.  For example, reassembling a lake that has been split into
     two loops by a state boundary.
  
  2. Constructing polygons from input data that does not follow S2
     conventions, i.e. where loops may have repeated vertices, or distinct
     loops may share edges, or shells and holes have opposite or unspecified
     orientations.
  
  3. Computing the symmetric difference of a set of polygons whose edges
     intersect only at vertices.  This can be used to implement a limited
     form of polygon intersection or subtraction as well as unions.
  
  4. As a tool for implementing other polygon operations by generating a
     collection of directed edges and then assembling them into loops.


.. cpp:class:: S2Polyline : public S2Region

  An S2Polyline represents a sequence of zero or more vertices connected by
  straight edges (geodesics).  Edges of length 0 and 180 degrees are not
  allowed, i.e. adjacent vertices should not be identical or antipodal.


.. cpp:class:: S2R2Rect : public S2Region

  This class is a stopgap measure that allows some of the S2 spherical
  geometry machinery to be applied to planar geometry.  An S2R2Rect
  represents a closed axis-aligned rectangle in the (x,y) plane, but it also
  happens to be a subtype of S2Region, which means that you can use an
  S2RegionCoverer to approximate it as a collection of S2CellIds.
  
  With respect to the S2Cell decomposition, an S2R2Rect is interpreted as a
  region of (s,t)-space on face 0.  In particular, the rectangle [0,1]x[0,1]
  corresponds to the S2CellId that covers all of face 0.  This means that
  only rectangles that are subsets of [0,1]x[0,1] can be approximated using
  the S2RegionCoverer interface.
  
  The S2R2Rect class is also a convenient way to find the (s,t)-region
  covered by a given S2CellId (see the FromCell and FromCellId methods).
  
  TODO: If the geometry library is extended to have better support for planar
  geometry, then this class should no longer be necessary.
  
  This class is intended to be copied by value as desired.  It uses
  the default copy constructor and assignment operator, however it is
  not a "plain old datatype" (POD) because it has virtual functions.


.. cpp:class:: S2Region

  An S2Region represents a two-dimensional region over the unit sphere.
  It is an abstract interface with various concrete subtypes.
  
  The main purpose of this interface is to allow complex regions to be
  approximated as simpler regions.  So rather than having a wide variety
  of virtual methods that are implemented by all subtypes, the interface
  is restricted to methods that are useful for computing approximations.


.. cpp:class:: S2RegionCoverer

  An S2RegionCoverer is a class that allows arbitrary regions to be
  approximated as unions of cells (S2CellUnion).  This is useful for
  implementing various sorts of search and precomputation operations.
  
  Typical usage:
  
  .. code-block:: cpp
  
    S2RegionCoverer coverer;
    coverer.set_max_cells(5);
    S2Cap cap = S2Cap::FromAxisAngle(...);
    vector<S2CellId> covering;
    coverer.GetCovering(cap, &covering);
    
  This yields a vector of at most 5 cells that is guaranteed to cover the
  given cap (a disc-shaped region on the sphere).
  
  The approximation algorithm is not optimal but does a pretty good job in
  practice.  The output does not always use the maximum number of cells
  allowed, both because this would not always yield a better approximation,
  and because max_cells() is a limit on how much work is done exploring the
  possible covering as well as a limit on the final output size.
  
  One can also generate interior coverings, which are sets of cells which
  are entirely contained within a region.  Interior coverings can be
  empty, even for non-empty regions, if there are no cells that satisfy
  the provided constraints and are contained by the region.  Note that for
  performance reasons, it is wise to specify a max_level when computing
  interior coverings - otherwise for regions with small or zero area, the
  algorithm may spend a lot of time subdividing cells all the way to leaf
  level to try to find contained cells.


.. cpp:class:: S2RegionIntersection : public S2Region

  An S2RegionIntersection represents the intersection of a set of regions.
  It is convenient for computing a covering of the intersection of a set of
  regions.


.. cpp:class:: S2RegionUnion : public S2Region

  An S2RegionUnion represents a union of possibly overlapping regions.
  It is convenient for computing a covering of a set of regions.

