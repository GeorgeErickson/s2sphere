import argparse
import glob


COMMENT_TAGS = ('//', '/*', ' *')


class_template = """
.. cpp:class:: {name}

{description}
"""


def extract(files, outfile='cpp.rst'):
    with open(outfile, 'w') as o:
        o.write('''
.. _cpp:

.. This file is autogenerated using `python extract_from_cpp.py`.


C++ API
=======

This is the API documentation of the original
`S2 geometry library <https://code.google.com/p/s2-geometry-library/>`_
extracted from its source code and included here for reference.

''')
        for in_file in files:
            with open(in_file, 'r') as i:
                extract_file(i, o)


def extract_file(in_file, out_file):
    indent = 0
    cached_lines = []
    for line in in_file:
        if line.startswith('class') and cached_lines:
            name = line[6:]
            name = name.replace(';', '')
            name = name.replace('{', '')
            name = name.strip()
            formatter = Formatter(indent)
            txt = class_template.format(
                name=name,
                description=formatter.comment(cached_lines),
            )
            out_file.write(' ' * indent +
                           txt.replace('\n', '\n' + ' ' * indent))
        elif line.startswith('template') and cached_lines:
            pass

        if line and not line.startswith(COMMENT_TAGS):
            cached_lines = []
        if line.startswith(COMMENT_TAGS):
            cached_lines.append(line)


class Formatter(object):
    def __init__(self, indent=0):
        self.indent = indent

    def strip(self, line):
        return (
            line
            .replace('// ', '')
            .replace('//', '')
            .replace('/* ', '')
            .replace('/*', '')
            .replace(' * ', '')
            .replace(' *', '')
        )

    def detect_block(self, lines):
        inside_block = False
        inside_list = False  # unnumbered lists and numbered lists
        processed = []

        for l in lines:
            processed.append(l)

            # whitelist lists
            if inside_list:
                if l.startswith(' ') or len(l) <= 1 or '. ' in l[:5]:
                    continue
                else:
                    inside_list = False
            if l.startswith((' -', '-', ' 1.', '1.')):
                inside_list = True
                continue

            if inside_block:
                if l.startswith(' ') or len(l) <= 1 or l.endswith(';\n'):
                    pass
                else:
                    inside_block = False
            elif l.startswith('  ') or (l.endswith(';\n') and
                                        processed[-3].endswith(':\n')):
                inside_block = True
                if len(processed[-2]) > 1:
                    processed.insert(-1, '\n')
                processed.insert(-1, '.. code-block:: cpp\n')
                processed.insert(-1, '\n')

            # ensure code-block indent
            if inside_block and not l.startswith('  '):
                processed[-1] = '  ' + processed[-1]

        return processed

    def comment(self, lines):
        processed = [self.strip(l) for l in lines]
        processed = self.detect_block(processed)
        return ''.join((' ' * 2) + l for l in processed)


if __name__ == '__main__':
    extract(glob.glob('../../tests/s2-geometry/geometry/s2/*.h'))
